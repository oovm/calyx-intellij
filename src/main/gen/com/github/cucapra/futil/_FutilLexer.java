/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.cucapra.futil;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.cucapra.futil.psi.FutilTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Futil.flex</tt>
 */
public class _FutilLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16912 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\2\7\1\12\1\13\3\0\1\14\1\15"+
    "\1\16\1\15\2\7\1\17\3\7\1\17\71\7\1\20\1\7\1\21\1\0\1\22\1\23\2\0\16\24\1"+
    "\25\1\26\1\27\1\30\2\7\1\31\11\7\1\32\21\7\1\33\1\34\24\7\1\35\3\7\1\17\1"+
    "\36\1\35\4\7\1\0\1\37\4\24\1\40\1\41\1\0\3\7\2\42\3\0\1\24\1\43\5\7\1\44\3"+
    "\24\1\45\1\46\13\7\1\47\1\50\1\51\1\52\1\24\1\53\2\0\1\54\3\7\3\24\1\55\12"+
    "\7\1\56\1\24\1\57\1\0\1\24\1\60\3\7\1\44\1\61\1\15\2\7\1\56\1\62\1\63\1\64"+
    "\2\0\3\7\1\65\10\0\2\7\1\25\1\66\2\0\1\67\1\24\1\70\3\24\1\71\6\7\1\72\2\24"+
    "\1\73\1\7\1\74\1\24\1\35\1\7\1\75\1\76\1\77\2\7\1\100\1\101\1\102\1\50\1\103"+
    "\1\104\1\105\1\74\1\24\1\21\1\0\1\106\1\107\1\77\2\7\1\100\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\24\1\117\1\0\1\106\1\32\1\31\2\7\1\100\1\120\1"+
    "\102\1\40\1\121\1\122\1\0\1\74\1\24\1\0\1\36\1\106\1\76\1\77\2\7\1\100\1\120"+
    "\1\102\1\50\1\113\1\116\1\105\1\74\1\24\1\36\1\0\1\123\1\124\1\125\1\126\1"+
    "\127\1\124\1\7\1\130\1\131\1\132\1\133\1\0\1\116\1\24\2\0\1\134\1\25\1\100"+
    "\2\7\1\100\1\7\1\135\1\136\1\132\1\137\1\42\1\74\1\24\2\0\1\75\1\25\1\100"+
    "\2\7\1\100\1\140\1\102\1\136\1\132\1\137\1\141\1\74\1\24\1\142\1\0\1\106\1"+
    "\25\1\100\4\7\1\143\1\136\1\144\1\145\1\146\1\74\1\24\1\0\1\34\1\147\1\7\1"+
    "\17\1\34\2\7\1\31\1\150\1\17\1\151\1\152\1\24\1\116\1\24\1\153\1\0\1\35\5"+
    "\7\1\154\1\43\1\155\1\156\1\24\1\157\4\0\1\160\1\161\1\162\1\35\1\163\1\164"+
    "\1\154\1\165\1\166\1\167\1\24\1\170\4\0\1\122\2\0\1\157\1\24\1\157\1\171\1"+
    "\172\1\7\1\35\3\7\1\22\1\37\1\24\1\136\1\173\1\24\1\37\3\24\1\174\1\175\7"+
    "\0\5\7\1\44\1\24\1\176\1\24\1\157\1\56\1\177\1\200\1\201\1\202\1\7\1\203\1"+
    "\204\1\24\1\167\4\7\1\32\1\205\5\7\1\206\51\7\1\125\1\17\1\125\5\7\1\125\4"+
    "\7\1\125\1\17\1\125\1\7\1\17\7\7\1\125\10\7\1\207\1\0\1\37\1\157\1\0\2\7\2"+
    "\0\12\7\2\66\1\35\114\7\1\76\2\7\1\210\2\7\1\42\11\7\1\124\1\7\1\122\1\7\1"+
    "\25\1\211\1\0\2\7\1\211\1\0\2\7\1\212\1\0\1\7\1\25\1\213\1\0\6\7\1\214\3\24"+
    "\1\215\1\216\1\24\1\157\3\0\1\217\1\24\1\157\13\7\1\0\5\7\1\220\10\7\1\66"+
    "\1\0\3\7\1\17\1\24\1\221\1\24\1\221\1\116\1\24\3\7\1\66\1\22\1\0\5\7\1\222"+
    "\3\7\1\21\1\24\1\43\4\0\2\7\1\155\1\221\6\7\1\173\1\156\3\24\1\50\1\24\1\157"+
    "\1\24\1\157\1\146\1\0\1\24\1\167\10\0\1\223\5\7\1\214\1\24\1\223\1\222\1\24"+
    "\1\157\1\0\1\224\1\221\1\0\1\225\3\7\1\73\1\201\1\24\1\60\4\7\1\56\1\24\1"+
    "\221\1\0\4\7\1\214\2\24\1\0\1\24\1\226\1\24\1\60\3\7\1\66\1\7\1\122\10\0\1"+
    "\227\2\24\1\230\1\231\1\157\30\7\6\24\1\167\1\224\42\7\2\66\4\7\2\66\1\7\1"+
    "\232\3\7\1\66\6\7\1\25\1\166\1\233\1\22\1\234\1\222\1\7\1\22\1\233\1\22\1"+
    "\235\1\236\3\0\1\237\1\0\1\104\1\240\1\0\1\241\1\242\2\0\1\36\1\146\2\0\1"+
    "\7\1\22\6\0\1\24\1\174\1\243\1\24\1\240\1\0\1\244\1\34\1\150\1\66\1\23\1\100"+
    "\1\7\1\245\1\246\1\247\2\0\5\7\1\122\116\0\5\7\1\17\5\7\1\17\20\7\1\22\1\250"+
    "\1\251\1\0\4\7\1\32\1\205\7\7\1\146\1\0\1\104\2\7\1\17\1\0\10\17\4\24\1\252"+
    "\3\0\1\35\1\203\1\253\1\22\1\35\11\7\1\17\1\254\1\35\12\7\1\206\1\246\4\7"+
    "\1\66\1\35\12\7\1\17\2\0\3\7\1\42\6\0\170\7\1\66\11\0\72\7\1\66\5\0\21\7\1"+
    "\22\10\0\5\7\1\66\41\7\1\22\2\7\1\24\1\251\2\0\5\7\1\155\1\67\1\255\3\7\1"+
    "\56\12\7\1\157\3\0\1\146\1\7\1\34\14\7\1\77\3\7\1\17\1\7\7\0\1\146\1\7\1\256"+
    "\1\257\2\7\1\44\3\0\6\7\1\222\1\0\1\60\5\7\1\214\1\24\1\167\1\0\1\24\1\157"+
    "\2\24\1\60\1\260\1\24\1\60\2\7\1\56\1\167\2\7\1\155\1\24\1\221\1\0\3\7\1\22"+
    "\1\71\5\7\1\44\1\24\1\240\1\146\1\24\1\157\1\261\1\7\1\24\1\262\5\7\1\73\1"+
    "\156\1\0\1\257\1\263\1\24\1\157\2\7\1\17\1\264\6\7\1\200\1\265\1\220\2\0\1"+
    "\266\1\7\1\44\1\267\1\0\3\270\1\0\2\17\5\7\1\206\1\66\1\0\16\7\1\44\1\271"+
    "\1\24\1\157\64\7\1\222\1\0\2\7\1\17\1\272\5\7\1\222\40\0\55\7\1\66\15\7\1"+
    "\21\4\0\1\17\1\0\1\272\1\273\1\7\1\100\1\17\1\166\1\274\15\7\1\21\3\0\1\272"+
    "\20\7\1\66\1\162\32\7\1\66\2\0\10\7\1\34\6\7\5\0\1\7\1\21\2\24\2\0\2\24\1"+
    "\275\2\0\1\276\4\0\1\277\1\232\17\7\1\22\2\0\1\24\1\157\1\35\2\7\1\300\1\35"+
    "\2\7\1\42\1\301\6\7\1\56\3\7\1\17\3\34\1\302\4\0\1\7\1\140\2\7\1\17\2\7\1"+
    "\303\1\7\1\66\1\7\1\66\4\0\17\7\1\42\10\0\6\7\1\22\20\0\1\304\20\0\3\7\1\22"+
    "\6\7\1\122\1\0\1\240\3\0\4\7\2\0\3\7\1\42\4\7\1\56\1\43\3\7\1\66\4\7\1\222"+
    "\1\7\1\253\5\0\23\7\1\66\1\24\1\157\4\7\1\222\4\7\1\222\5\7\1\0\6\7\1\222"+
    "\23\0\46\7\1\17\1\0\2\7\1\66\1\0\1\7\23\0\1\66\1\100\4\7\1\32\1\305\2\7\1"+
    "\66\1\0\2\7\1\17\1\0\3\7\1\17\10\0\2\7\1\306\1\0\2\7\1\66\1\0\3\7\1\21\10"+
    "\0\7\7\1\301\10\0\1\307\1\67\1\140\1\35\2\7\1\222\1\112\4\0\3\7\1\22\3\7\1"+
    "\22\4\0\1\7\1\35\2\7\1\310\3\0\6\7\1\66\1\0\2\7\1\66\1\0\2\7\1\42\1\0\2\7"+
    "\1\21\15\0\11\7\1\122\6\0\6\7\1\42\1\0\6\7\1\42\41\0\1\225\6\7\1\24\1\156"+
    "\3\0\1\116\1\24\1\0\1\104\1\225\5\7\1\24\1\43\2\0\3\7\1\122\1\24\1\157\1\225"+
    "\3\7\1\155\1\24\1\136\1\24\2\0\4\7\1\311\1\0\1\225\5\7\1\44\1\24\1\312\1\313"+
    "\1\24\1\314\4\0\2\7\1\31\2\7\1\214\1\24\1\175\10\0\1\17\1\315\1\7\1\32\1\7"+
    "\1\122\5\7\1\155\1\24\1\43\1\24\1\157\1\134\1\76\1\77\2\7\1\100\1\120\1\102"+
    "\1\50\1\113\1\133\1\246\1\74\2\174\21\0\6\7\1\173\1\24\1\176\1\42\1\24\1\157"+
    "\4\0\6\7\2\24\1\316\1\0\1\24\1\157\24\0\5\7\1\155\1\167\1\24\1\240\2\0\1\263"+
    "\4\0\6\7\2\24\1\317\1\0\1\24\1\157\4\0\5\7\1\44\1\24\1\0\1\24\1\157\6\0\3"+
    "\7\1\320\1\24\1\221\1\24\1\157\54\0\10\7\1\24\1\157\1\0\1\146\70\0\7\7\1\122"+
    "\40\0\1\7\1\100\3\7\1\155\1\156\1\24\1\122\1\0\1\24\1\157\2\0\1\34\3\7\1\321"+
    "\2\24\1\37\1\156\51\0\63\7\1\21\14\0\15\7\1\17\2\0\30\7\1\222\27\0\5\7\1\17"+
    "\72\0\10\7\1\17\67\0\7\7\1\122\3\7\1\17\1\24\1\157\14\0\3\7\1\66\1\174\1\0"+
    "\6\7\1\156\1\0\1\222\1\0\1\24\1\157\1\272\2\7\1\246\2\7\56\0\10\7\1\22\1\0"+
    "\1\73\4\24\1\156\1\0\1\104\1\225\1\7\10\0\1\122\3\0\75\7\1\22\2\0\36\7\1\42"+
    "\41\0\1\21\77\0\15\7\1\42\1\7\1\22\1\7\1\122\1\7\1\322\130\0\1\276\1\323\1"+
    "\43\1\224\1\324\1\221\3\0\1\325\22\0\1\313\67\0\12\7\1\25\10\7\1\25\1\326"+
    "\1\327\1\7\1\330\1\140\7\7\1\32\1\331\2\25\3\7\1\332\1\166\1\34\1\100\51\7"+
    "\1\66\3\7\1\100\2\7\1\206\3\7\1\206\2\7\1\25\3\7\1\25\2\7\1\17\3\7\1\17\3"+
    "\7\1\100\3\7\1\100\2\7\1\206\1\333\14\24\1\156\1\224\5\24\1\174\1\304\1\0"+
    "\1\241\2\0\1\224\1\37\1\24\52\0\1\156\2\24\1\334\1\335\1\43\72\0\30\7\1\22"+
    "\1\0\1\156\5\0\10\7\1\214\1\43\1\24\1\157\24\0\1\140\3\7\1\160\1\35\1\206"+
    "\1\336\1\244\1\337\1\160\1\232\1\160\2\206\1\115\1\7\1\31\1\7\1\222\1\340"+
    "\1\31\1\7\1\222\50\0\32\7\1\17\5\0\106\7\1\22\1\0\33\7\1\66\120\7\1\21\53"+
    "\0\3\7\1\66\134\0\36\24\2\0");

  /* The ZZ_CMAP_A table has 1800 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\2\0\1\3\1\0\1\12\1\5\1\36\2\0\1\17\1\21\1\22\1\6\1\0"+
    "\1\35\1\41\1\37\1\4\1\14\11\15\1\33\1\34\1\27\1\32\1\30\1\40\1\11\22\7\1\23"+
    "\1\13\1\24\1\31\1\16\1\0\3\7\1\20\6\7\1\25\1\0\1\26\7\0\1\1\2\0\1\3\11\0\1"+
    "\7\12\0\1\7\1\0\1\10\7\7\1\0\2\7\4\0\4\7\6\0\5\7\7\0\1\7\1\0\1\7\1\0\10\10"+
    "\5\7\1\0\2\7\3\0\3\7\1\0\1\7\6\0\1\7\1\10\3\7\1\0\1\7\1\0\4\7\1\0\13\7\1\0"+
    "\3\7\1\0\5\10\2\0\6\7\1\0\7\7\1\0\1\7\7\0\15\10\1\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\1\10\3\7\5\0\3\10\5\0\3\7\7\10\4\0\2\7\1\10\13\7\1\0\1\7\7\10\2\0\6\10"+
    "\2\7\2\10\1\0\4\10\2\7\2\10\3\7\2\0\2\7\1\10\6\7\3\10\2\0\11\7\3\10\1\7\6"+
    "\0\2\10\6\7\4\10\2\7\2\0\2\10\1\7\11\10\1\7\3\10\1\7\5\10\2\0\1\7\3\10\4\0"+
    "\6\7\6\0\6\10\1\0\11\10\6\7\3\10\1\7\2\10\1\7\7\10\2\7\2\10\2\0\2\10\1\7\3"+
    "\10\1\0\10\7\2\0\2\7\2\0\6\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\3\10\2\0"+
    "\3\10\1\7\10\0\1\10\4\0\2\7\1\0\1\7\1\0\3\10\1\0\6\7\4\0\2\7\1\0\2\7\1\0\2"+
    "\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7"+
    "\0\4\10\3\7\1\10\2\0\1\7\1\0\2\7\1\0\3\7\2\10\1\0\3\10\2\0\1\7\11\0\1\10\1"+
    "\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\2\7\4\0\5\10"+
    "\3\0\3\10\1\0\4\10\2\0\1\7\6\0\5\10\1\0\5\7\3\0\1\7\7\10\1\0\2\10\5\0\2\10"+
    "\1\0\4\7\1\0\3\7\6\0\1\7\2\0\2\7\5\0\3\7\2\0\1\7\3\10\1\0\4\10\1\7\5\0\3\7"+
    "\1\10\7\0\1\7\2\0\2\10\1\0\7\7\1\0\1\7\4\0\1\10\4\0\6\10\1\0\1\10\3\0\2\10"+
    "\4\0\1\7\1\10\1\7\5\10\7\7\10\10\1\0\2\10\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7"+
    "\2\0\1\7\6\0\4\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\3\7\2\10\1\0\2\10\1\7"+
    "\2\0\5\7\1\0\1\7\1\0\6\10\2\0\2\10\2\0\4\7\5\0\1\10\1\0\1\10\1\0\1\10\4\0"+
    "\2\10\5\7\10\10\11\0\1\10\1\0\7\10\1\7\2\10\4\7\3\10\1\7\3\10\2\7\7\10\3\7"+
    "\4\10\5\7\14\10\1\7\1\10\5\0\1\7\2\0\3\7\1\0\7\7\2\0\3\10\1\3\11\7\3\10\3"+
    "\0\2\7\2\10\4\0\1\7\1\0\2\10\4\0\4\7\10\10\3\0\1\7\4\0\1\7\1\10\5\0\3\10\2"+
    "\0\1\7\1\10\1\7\5\0\4\10\4\0\4\7\4\0\5\10\3\7\3\0\10\10\5\7\2\10\3\0\3\7\3"+
    "\10\1\0\5\10\4\7\1\10\4\7\3\10\2\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7"+
    "\1\0\6\7\2\0\2\7\13\3\5\0\2\1\5\0\1\3\1\10\13\0\1\10\12\0\1\3\1\0\1\10\3\0"+
    "\3\10\2\0\1\7\4\0\3\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\4\7\3\10\2\7\4\0\1\3\4\0"+
    "\3\7\1\0\5\7\3\0\2\10\2\0\3\7\6\10\1\0\3\7\1\10\3\7\1\10\4\7\1\10\4\7\3\0"+
    "\1\7\1\0\1\7\2\0\5\7\1\10\2\7\2\10\5\7\1\0\4\7\2\10\4\0\1\7\3\10\2\7\1\10"+
    "\5\7\2\10\3\0\3\7\4\0\3\7\2\10\2\0\6\7\1\0\3\10\1\0\2\10\5\0\5\7\5\0\1\7\1"+
    "\10\3\7\1\0\2\7\1\0\2\7\3\0\2\10\10\0\3\10\1\0\1\7\1\0\1\7\3\0\4\7\4\0\1\10"+
    "\6\0\2\7\2\0\3\7\3\0\3\7\1\0\2\7\1\0\1\7\5\0\1\10\2\0\1\7\3\0\1\7\2\0\4\7"+
    "\1\0\2\7\2\0\1\7\3\10\1\0\2\10\1\0\5\7\2\10\1\0\3\7\1\10\2\0\1\7\1\0\1\10"+
    "\4\7\5\0\3\10\3\0\2\10\1\7\1\0\1\7\3\0\1\7\1\0\4\7\1\0\1\7\4\10\2\7\1\0\1"+
    "\7\1\10\3\0\1\7\3\0\2\7\3\0\3\10\2\0\6\10\2\7\3\0\2\10\1\0\2\10\3\0\6\10\2"+
    "\0\3\10\2\0\4\10\4\0\1\7\2\0\2\7\2\0\4\7\1\0\4\7\1\0\1\7\1\0\6\7\2\0\5\7\1"+
    "\0\4\7\1\0\4\7\2\0\3\10\2\0\7\10\1\0\2\10\1\0\2\10\1\0\1\7\1\0\1\7\5\0\1\7"+
    "\1\0\1\7\1\0\3\7\1\0\3\7\1\0\3\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\1\2\0\1\32\2\0"+
    "\1\33\1\0\2\34\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\42\0\252\0\42"+
    "\0\314\0\42\0\42\0\356\0\u0110\0\42\0\42\0\42"+
    "\0\42\0\42\0\42\0\42\0\42\0\42\0\42\0\42"+
    "\0\42\0\42\0\42\0\42\0\42\0\u0132\0\u0154\0\314"+
    "\0\42\0\u0176\0\u0198\0\42\0\u01ba\0\42\0\u01dc\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\7\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\43\0\3\3\42\0\1\5\1\0\1\37\33\0\2\5"+
    "\1\0\37\5\7\0\2\7\3\0\3\7\1\0\1\7"+
    "\21\0\12\40\1\41\1\42\26\40\14\0\3\14\43\0"+
    "\1\43\51\0\1\44\11\0\6\37\1\45\33\37\1\40"+
    "\2\0\37\40\14\0\1\46\1\47\24\0\4\37\1\50"+
    "\1\37\1\45\33\37\14\0\3\47\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\20\11\1\1\2\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public _FutilLexer() {
    this((java.io.Reader)null);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FutilLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NON_ESCAPE;
            } 
            // fall through
          case 30: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 31: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 32: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 33: break;
          case 5: 
            { return SYMBOL;
            } 
            // fall through
          case 34: break;
          case 6: 
            { return AT;
            } 
            // fall through
          case 35: break;
          case 7: 
            { return QUOTATION;
            } 
            // fall through
          case 36: break;
          case 8: 
            { return ESCAPE;
            } 
            // fall through
          case 37: break;
          case 9: 
            { return NUMBER;
            } 
            // fall through
          case 38: break;
          case 10: 
            { return PARENTHESIS_L;
            } 
            // fall through
          case 39: break;
          case 11: 
            { return PARENTHESIS_R;
            } 
            // fall through
          case 40: break;
          case 12: 
            { return BRACKET_L;
            } 
            // fall through
          case 41: break;
          case 13: 
            { return BRACKET_R;
            } 
            // fall through
          case 42: break;
          case 14: 
            { return BRACE_L;
            } 
            // fall through
          case 43: break;
          case 15: 
            { return BRACE_R;
            } 
            // fall through
          case 44: break;
          case 16: 
            { return ANGLE_L;
            } 
            // fall through
          case 45: break;
          case 17: 
            { return ANGLE_R;
            } 
            // fall through
          case 46: break;
          case 18: 
            { return ACCENT;
            } 
            // fall through
          case 47: break;
          case 19: 
            { return EQ;
            } 
            // fall through
          case 48: break;
          case 20: 
            { return COLON;
            } 
            // fall through
          case 49: break;
          case 21: 
            { return SEMICOLON;
            } 
            // fall through
          case 50: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 51: break;
          case 23: 
            { return CITE;
            } 
            // fall through
          case 52: break;
          case 24: 
            { return DOT;
            } 
            // fall through
          case 53: break;
          case 25: 
            { return QUESTION;
            } 
            // fall through
          case 54: break;
          case 26: 
            { return STRING;
            } 
            // fall through
          case 55: break;
          case 27: 
            { return TO;
            } 
            // fall through
          case 56: break;
          case 28: 
            { return BITS;
            } 
            // fall through
          case 57: break;
          case 29: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
