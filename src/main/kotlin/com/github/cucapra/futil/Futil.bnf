{
    parserClass = "com.github.cucapra.futil.parser.FutilParser"
    parserUtilClass = "com.github.cucapra.futil.psi.FutilParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Futil"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.cucapra.futil.psi"
    psiImplPackage = "com.github.cucapra.futil.psi.impl"

    elementTypeHolderClass = "com.github.cucapra.futil.psi.FutilTypes"
    elementTypeClass = "com.github.cucapra.futil.psi.FutilElementType"
    tokenTypeClass = "com.github.cucapra.futil.psi.FutilElementType"

    psiImplUtilClass = "com.github.cucapra.futil.psi.FutilASTExtension"
    generateTokenAccessors = true
    tokens = [
        COMMENT = 'regexp:(//|#)[^\r\n]*'
        BLOCK_COMMENT = 'regexp:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]'

        AS = "as"
        NULL = 'null'
        BOOLEAN = 'regexp:true|false'

        SYMBOL = 'Symbol'
        STRING = 'String'
        BYTE = 'regexp:(0[bBoOxXfF][0-9A-Fa-f][0-9A-Fa-f_]*)'
        INTEGER = 'regexp:(0|[1-9][0-9_]*)'
        DECIMAL = 'regexp:[0-9]+\.[0-9]+([eE][+-][0-9]+)?'

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ACCENT = '^'
        ANGLE_L = '<'
        ANGLE_R = '>'
        QUOTATION = '"'
        ESCAPE = '\'
        NON_ESCAPE = 'regexp:[^\\]'
        EQ = '='
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        CITE = '$'
        DOT = '.'
        STAR = '*'
        AT = '@'
//      SPACE='regexp:\s+'
//      ANY = 'regexp:.'
    ]
}

Futil ::= top_statement*;
private top_statement ::=
    import_statement
  | component_statement
  | SEMICOLON
  ;
private inner_statement ::=
    group_statement
  | normal_statement
  | annotation? expression
  ;
// ---------------------------------------------------------------------------------------------------------------------
import_statement ::= IMPORT STRING;
IMPORT ::= "import"
// ---------------------------------------------------------------------------------------------------------------------
component_statement ::= COMPONENT component_name component_target <<brace inner_statement SEMICOLON>>;
component_name ::= identifier <<parenthesis identifier SEMICOLON>>
component_target ::= TO <<parenthesis identifier SEMICOLON>>
COMPONENT ::= "component"
// ---------------------------------------------------------------------------------------------------------------------
group_statement ::= GROUP identifier <<brace inner_statement SEMICOLON>>;
GROUP  ::= "group";
// ---------------------------------------------------------------------------------------------------------------------
normal_statement ::= identifier <<brace inner_statement SEMICOLON>>;
// ---------------------------------------------------------------------------------------------------------------------
expression ::= lhs EQ rhs;
rhs ::= call | value | num;
lhs ::= namesapce;
// ---------------------------------------------------------------------------------------------------------------------
call ::= identifier <<parenthesis rhs COMMA>>;
// ---------------------------------------------------------------------------------------------------------------------
value ::= NULL | BOOLEAN;
// ---------------------------------------------------------------------------------------------------------------------
private num ::= [SIGN] (INTEGER | DECIMAL | DECIMAL_BAD) [number_suffix] | [SIGN] BYTE;
// ---------------------------------------------------------------------------------------------------------------------
private str ::= [string_prefix] (string_inline|string_multi);
string_inline ::= STRING;
string_multi ::= QUOTATION char* QUOTATION;
private char ::= escaped | NON_ESCAPE;
escaped ::= ESCAPE (ESCAPE|NON_ESCAPE);
// ---------------------------------------------------------------------------------------------------------------------
ref ::= CITE symbol_path;
// ---------------------------------------------------------------------------------------------------------------------
annotation ::= annotation_mark;
annotation_mark ::= AT SYMBOL;
private anno_inner ::= [anno_item (COMMA anno_item)* [COMMA]];
private anno_item  ::= key_symbol EQ anno_value | anno_value;
private anno_value ::= value | identi;
// ---------------------------------------------------------------------------------------------------------------------
table ::= [type_hint];
private table_inner ::= [table_item ([COMMA] table_item)* [COMMA]];
private table_item ::= pair | value;
// ---------------------------------------------------------------------------------------------------------------------
namesapce ::= identifier (DOT identifier)*;
identifier ::= SYMBOL
// ---------------------------------------------------------------------------------------------------------------------
meta parenthesis ::= PARENTHESIS_L [<<param>> (<<sep>> <<param>>)* [<<sep>>]] PARENTHESIS_R;
meta bracket ::= BRACKET_L [<<param>> (<<sep>> <<param>>)* [<<sep>>]] BRACKET_R;
meta brace   ::= BRACE_L (<<param>>|<<sep>>)* BRACE_R
meta angle   ::= ANGLE_L [<<param>> (<<sep>> <<param>>)* [<<sep>>]] ANGLE_R